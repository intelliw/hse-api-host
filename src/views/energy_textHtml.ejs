
<%  
    /* custom attributes and classes added to elements
    navbar
        id = titlePeriod
        navbar.ejs                                      <!-- ENERGY NAVBAR    
            select-parent
            id = navbarMain, navbarAPI, navDuration, navSite
                select-value, select-justtext 
    accordion
        card-header                                     <!-- PERIOD n NAV row --> 
            select-toggle-collection
            select-toggle-grandchild
        
        select-collection-panel  index=n                        <!-- PERIOD n BODY panel --> 
            card-body <pane-child | pane-grandchild>  redraw    <!-- PERIOD n BODY pane -->
                ...                                             <!-- PERIOD n BODY pane CHARTs  -->    
                    select-chart-title
                    chart-selection-reset 
                    pane-column-chart-div  pane-table-chart-div

                select-filter                           <!-- PERIOD n BODY pane FILTER BUTTONS -->
                        ...
                            select-filter-reset
                            select-filter-visibility 
                        select-filter-btn-panel
    ...                                                 <!-- FOOTER 
        id = btnSumAvg    
    */ 

    // constants - soime of these are placed into client side script blocks at the bottom of this page
    const API_BASE_URL = consts.API_SCHEME + '://' + consts.API_HOST;     // e.g.  'http://api.endpoints.sundaya.cloud.goog'
    const SHOW_ALL_PANELS = false;                                        // true to open all panels at startup       
    const PANES = ['pane-child', 'pane-grandchild'];

    // parameters from the first self link, these are common across all collections
    let links = collections[0].collection.links; 

    let link_self = utils.findByPropertyValue(links, 'rel', 'self')[0] ;
    let self_descriptions = link_self.description.split(' ');       // e.g. 'hse week 20190204 1' 

    let params_energy = self_descriptions[0]; 
    let params_period = self_descriptions[1];
    
    let params_epoch_year = self_descriptions[2].substring(0, 4); 
    let params_epoch_month = self_descriptions[2].substring(4, 6); 
    let params_epoch_day = self_descriptions[2].substring(6, 8); 
    
    let params_duration = collections.length;
    let params_site = self_descriptions[4];

    // check which energy params are active 
    let isHarvest = utils.valueExistsInArray(['harvest', 'hse'], params_energy);
    let isStore = utils.valueExistsInArray(['store', 'hse'], params_energy);
    let isEnjoy = utils.valueExistsInArray(['enjoy', 'hse'], params_energy);
    let isGrid = utils.valueExistsInArray(['grid', 'hse'], params_energy);

    let panel_map = '';

%> 

<!doctype html>
<html lang="en">

<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

    <link rel="stylesheet" href="/static/css/bootstrap.min.css">
    <link rel="stylesheet" href="/static/css/energy-button-toggle.css">
    <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
    <title>Sundaya Energy API</title>
</head>

<body>    
    <nav class="navbar navbar-expand-md navbar-dark bg-primary">

        <!-- TITLE / period-->
        <span class="d-flex align-item-start">
            <a class="navbar-brand pl-2" href="#navbarAPI, #navbarMain" data-toggle="collapse">Sundaya Energy API</a>

            <ul id="titlePeriod" class="navbar-nav show" data-toggle="tooltip" data-placement="right" title="<%= params_duration %> <%=params_period%><%= params_duration > 1 ? 's' : ''%>">
                <a class="nav-link pl-1" href="#" data-toggle="collapse"><%= utils.capitalise(link_self.name) %>
                </a>
            </ul>
        </span>

        <!-- HAMBURGER  -->
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarAPI, #navbarMain">
            <span class="navbar-toggler-icon"></span>
        </button>

        <!-- ENERGY NAVBAR ------------------------------------------------------------------------------------------------------------->
        <div class="collapse navbar-collapse" id="navbarMain">
            <ul id="navbarAPI" class="navbar-nav mt-auto collapse">

                <% include energy_textHtml_navbar %>

            </ul>

        </div>

    </nav>

    <!-- PANELS  ------------------------------------------------------------------------------------------------------------->
    <div class="accordion">

        <% for(var n_cols=0; n_cols < collections.length; n_cols++) { 
            const FIND_ALL = true;

            links = collections[n_cols].collection.links; 
            items = collections[n_cols].collection.items; 

            link_self = utils.findByPropertyValue(links, 'rel', 'self')[0];
            link_next = utils.findByPropertyValue(links, 'rel', 'next')[0];
            link_prev = utils.findByPropertyValue(links, 'rel', 'prev')[0];
            link_up = utils.findByPropertyValue(links, 'rel', 'up')[0];

            link_collections = utils.findByPropertyValue(links, 'rel', 'collection', FIND_ALL);
            link_col_children = link_collections[0];                                                       // first is child second is grandchild
            link_col_grandchildren = link_collections[1];

            bHasChildren = link_col_children; 
            bHasGrandchildren = link_col_grandchildren; 

            if (!bHasChildren) {link_col_children = {name: '.', description: '', href: ''}; }                // instant has no child
            if (!bHasGrandchildren) {link_col_grandchildren = {name: '.', description: '', href: ''}; }      // second has no grandchild
            
            child_descriptions = (link_col_children.description ? link_col_children.description.split(' ') : []);
            grandchild_descriptions = (link_col_grandchildren.description ? link_col_grandchildren.description.split(' ') : []);
            child_period = link_col_children.name.split('.')[1];
            grandchild_period = link_col_grandchildren.name.split('.')[1];                                 // e.g day.timeofday

            panel_map += '{child: { dataTable: undefined, chart: undefined, table: undefined }, grandchild: { dataTable: undefined, chart: undefined, table: undefined }}';
            panel_map += (n_cols == collections.length - 1) ? '' : ',';                                    // trailing comma except for last collection 
        %>

        <!-- PERIOD n PANEL -->
        <div class="card border border-top border-primary border-right-0 border-left-0 rounded-0">

            <!-- PERIOD n NAV row -->
            <div class="card-header py-2 px-0 d-flex">

                <!-- PERIOD n NAV link buttons -->
                <h2 class="mb-0 ml-3 pl-1">
                    
                    <!-- prev -->
                    <button type="button" class="btn btn-sm btn-light border border-secondary rounded-left py-0 capitalize" data-toggle="tooltip"
                        title="Previous <%= utils.capitalise(link_prev.name) %>"
                        onclick="window.location.href = '<%= link_prev.href %>'">
                        <i class="material-icons text-secondary font-weight-bolder" style="font-size:12px;">navigate_before</i>
                    </button>

                    <!-- next -->
                    <button type="button" class="btn btn-sm btn-light border border-secondary rounded-right py-0" data-toggle="tooltip" title="Next <%= utils.capitalise(link_next.name) %>"
                        onclick="window.location.href = '<%= link_next.href %>'">
                        <i class="material-icons text-secondary font-weight-bolder" style="font-size:12px;">navigate_next</i>
                    </button>

                    <!-- self -->
                    <span class="btn select-toggle-collection py-0 pl-1 pr-1" data-toggle="collapse">
                        <h3 class="display-5 text-secondary"><small data-toggle="tooltip"
                            title="<%= utils.capitalise(link_self.name) + ' ' + link_self.title%>"><%= link_self.prompt %></small></h3>
                    </span>

                    <!-- up -->
                    <% if (link_up) { %>

                    <button type="button" class="btn btn-sm btn-light border border-secondary rounded-right py-0" data-toggle="tooltip"
                        title="<%= utils.capitalise(link_up.name) %> (<%= link_up.prompt %>)"
                        onclick="window.location.href = '<%= link_up.href %>'">
                        <i class="material-icons text-secondary font-weight-normal" style="font-size:12px;">call_made</i>
                    </button>

                    <% } %>

                </h2>

                <h2 class="mb-0 ml-3 pl-1 flex-grow-1 select-toggle-collection">
                </h2>

                <!-- PERIOD n NAV row CHILD / GRANDCHILD toggle -->
                <div class="d-flex flex-nowrap pt-1 mb-0 pr-3">

                    <div class="d-flex px-1">
                        <% if (bHasChildren) { %> <h3 class="display-5 text-secondary text-capitalize name-toggle-child collapse show"><small><%= utils.capitalise(child_period) %></small></small></h3> <% } %>
                        <% if (bHasGrandchildren) { %> <h3 class="display-5 text-secondary text-capitalize name-toggle-grandchild collapse hide"><small><%= utils.capitalise(grandchild_period) %></small></small></h3> <% } %>
                    </div>

                    <% if (bHasChildren && bHasGrandchildren) { %>

                    <span class="btn select-toggle-grandchild pl-1 mr-1 pr-1" data-toggle="button">
                        <button type="button" class="btn btn-xs btn-secondary btn-toggle" data-toggle="tooltip"
                            title="<%= utils.capitalise(link_col_grandchildren.name.replace('.', ' | '), true) %>">
                            <div class="handle"></div>
                        </button>
                    </span>

                    <% } %>

                </div>

            </div>

            <!-- PERIOD n BODY panel -->
            <div class="p-0 mt-2 select-collection-panel collapse <%= n_cols == 0 || SHOW_ALL_PANELS ? 'show' : 'hide' %>" index=<%= n_cols%>>
                
                <% for (var n_panes=0; n_panes < PANES.length; n_panes++) { pane=PANES[n_panes]; %>

                <!-- PERIOD n BODY pane -->
                <div class="card-body <%= pane === 'pane-child' ? 'pane-child collapse show' : 'pane-grandchild collapse' %> redraw pt-0 pb-2">

                    <div class="d-flex flex-nowrap">

                        <div class="d-flex flex-nowrap flex-grow-1">
                            <div class="flex-grow-1">

                                <!-- PERIOD n BODY pane HEADER -->
                                <h3 class="display-5 text-secondary"><small data-toggle="tooltip" title="<%= utils.capitalise((pane === 'pane-child' ? link_col_children : link_col_grandchildren).name.split('.')[1]) %>"><%= pane === 'pane-child' ? link_col_children.prompt : link_col_grandchildren.prompt %></small>
                                </h3>

                                <!-- PERIOD n BODY pane CHARTs  -->
                                <div class="d-flex flex-nowrap">
                                    
                                    <div class="row m-0">
                                        <div class="row m-0">

                                            <div class="col-md px-1 mb-2 mr-2 border border-default">
                                                
                                                <div class="d-flex flex-grow-1 justify-content-between py-0 border-bottom">
                                                    
                                                    <div class="select-chart-title sundaya-font-row py-0 mt-1 px-0 text-secondary font-weight-bold">
                                                        </div>  

                                                    <button type="button" class="chart-selection-reset btn btn-outline-light btn-sm py-0 mx-0 px-0"
                                                         onclick="panelMap[<%= n_cols %>].<%= pane === 'pane-child' ? 'child' : 'grandchild' %>.chart.setSelection()">
                                                        <i class="material-icons" data-toggle="tooltip" title="clear selection"
                                                            style="font-size:18px;color:darkgrey;">bar_chart</i>
                                                    </button>
                                                </div>
                                                
                                                <div class="pane-column-chart-div px-0 mt-2" 
                                                    style="width:400px; height:300px"></div>    

                                                <div class="btn-group btn-group-sm flex-wrap" 
                                                    <% if (pane === 'pane-grandchild') { %>
                                                        data-toggle="tooltip" title="<%= utils.capitalise(grandchild_period) %> (<%= link_col_grandchildren.title %>)" onclick="window.location.href = '<%= link_col_grandchildren.href %>'"
                                                    <% } %>>

                                                    <% for(var n_btns=0; n_btns < (pane === 'pane-child' ? child_descriptions : grandchild_descriptions).length; n_btns++) { %>

                                                        <button type="button" class="btn btn-light border border-default py-0 m-0 mb-2 mr-1" 
                                                            <% if (pane === 'pane-child') { %>
                                                                data-toggle="tooltip" title="<%= items[n_btns].links[0].prompt %>" onclick="window.location.href = '<%= items[n_btns].links[0].href %>'"
                                                            <% } %>>
                                                            <small class="text-secondary font-weight-bold align-baseline"><%= (pane === 'pane-child' ? child_descriptions[n_btns] : grandchild_descriptions[n_btns]) %></small>
                                                        </button>
                                                    
                                                    <% } %>
                                                </div>

                                            </div>
                                            
                                            <div class="col-md px-1 mb-2 mr-2 border border-default">
                                                <div class="pane-table-chart-div px-0">
                                                </div>
                                            </div>

                                        </div>

                                    </div>

                                </div>

                            </div>        
                        </div>

                        <!-- PERIOD n BODY pane FILTER BUTTONS -->                    
                        <div class="select-filter pr-1 my-2">
                            
                            <div class="flex-wrap pl-1 pr-0">

                                <div class="d-flex justify-content-end px-0">

                                    <button type="button" class="select-filter-reset btn btn-outline-light collapse hide btn-sm py-0 px-0">
                                        <i class="material-icons" data-toggle="tooltip" title="reset filters"
                                            style="font-size:24px;color:darkgrey;">toggle_on</i>
                                    </button>

                                    <button type="button" class="select-filter-visibility btn btn-outline-light btn-sm py-0 px-0">
                                        <i class="material-icons" data-toggle="tooltip" title="show filters"
                                            style="font-size:24px;color:darkgrey;">link_off</i>
                                    </button>

                                </div>

                                <div class="select-filter-btn-panel collapse" style="width: 8.5rem"> 

                                    <div data-toggle="tooltip" title="filter by <%= utils.capitalise((pane === 'pane-child' ? link_col_grandchildren : link_col_children).name.split('.')[1]) %> (<%= (pane === 'pane-child' ? link_col_grandchildren : link_col_children).title %>)" 
                                            data-placement="left"> 
                                    <% for(var n_btns=0; n_btns < (pane === 'pane-child' ? grandchild_descriptions : child_descriptions).length; n_btns++) { %>

                                        <div class="btn btn-block btn-secondary badge d-flex justify-content-between pr-0">
                                            <%= (pane === 'pane-child' ? grandchild_descriptions[n_btns] : child_descriptions[n_btns]) %>
                                            <button type="button" class="btn btn-sm btn-secondary btn-toggle select-filter-btn active">
                                                <div class="handle"></div>
                                            </button>
                                        </div>
                                    
                                    <% } %>
                                    </div>

                                </div>

                            </div>
                    
                        </div>

                    </div>

                </div>

                <% } %>

            </div>

        </div>
        
        <% } %>
        
    </div>
    
    <!-- FOOTER  ------------------------------------------------------------------------------------------------------------->
    <nav class="navbar navbar-expand-md navbar-dark bg-light border-top border-primary py-0 pr-3">
        
        <div class="d-flex flex-grow-1 justify-content-end">&nbsp

            <% if (bHasChildren && bHasGrandchildren) { %> 

            <!-- SUM/AVG --->
            <span class="mb-1 mr-1" data-toggle="tooltip" data-placement="right" title="Total | Average/<%= grandchild_period %>">
                <button id="btnSumAvg" type="button" class="btn btn-sm btn-outline-default btn-avg-sum btn-primary btn-toggle">
                    <div class="handle"></div>
                </button>
            </span>

            <% } %>

        </div>

    </nav>

    <!-- SCRIPT: jQuery first, then Popper.js, then Bootstrap JS, app scripts must be last -->
    <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js"
        integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo"
        crossorigin="anonymous"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"
        integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1"
        crossorigin="anonymous"></script>
    
    <script src="/static/js/bootstrap.min.js"></script>
    <script src="/static/js/collection.js"></script>
    <script src="/static/js/energy-charts.js"></script>

    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>

    <script type="text/javascript">

        const API_BASE_URL = '<%= API_BASE_URL %>';     // e.g.  'http://api.endpoints.sundaya.cloud.goog'

        const isHarvest = <%= isHarvest %>;
        const isStore = <%= isStore %>;
        const isEnjoy = <%= isEnjoy %>;
        const isGrid = <%= isGrid %>;
        
        const childPeriod = '<%= utils.capitalise(child_period) %>';
        const grandchildPeriod = '<%= utils.capitalise(grandchild_period) %>';

        let panelMap = <%='[' + panel_map + ']'%> ;

        google.charts.load('current', { packages: ['table', 'corechart'], callback: redrawPanels });

        // draws the active pane
        function redrawActivePane(pane) {
            
            const AGGDATA_CHART_COLUMNS = [0, 1, 2, 3, 4, 6, 7];    // sequence is 0 based and has 1 more than the # collection items in a child period 
            const RAWDATA_HSE_COLUMNS = [2, 3, 4, 5, 6, 7, 8, 9];   // 8 cols for hse,  '2,3' if store or grid, otherwise '2'
            const AGGDATA_HSE_COLUMNS = [1, 2, 3, 4, 5, 6, 7, 8];   // 8 cols for hse,  '1,2' if store or grid, otherwise '1'

            const FORMATTED_DATA_CHILD_COLUMN = 0;
            const FORMATTED_DATA_GRANDCHILD_COLUMN = 1;

            const ALL_COLUMNS = [FORMATTED_DATA_CHILD_COLUMN, FORMATTED_DATA_GRANDCHILD_COLUMN].concat(RAWDATA_HSE_COLUMNS);

            let filterColumn; let groupColumn;

            const chartDiv = pane.find('.pane-column-chart-div');
            const tableDiv = pane.find('.pane-table-chart-div');
            
            let panelIndex = Number(pane.closest('.select-collection-panel').attr('index'));
            let panelMapObj = panelMap[panelIndex];            

            let sumAvg = getGroupOption();
            let filterVals = getActiveFilterButtons(pane);

            // initialise child datatable 
            if (!panelMapObj.child.dataTable) {

                let dt = new google.visualization.DataTable(getJsonChartData(panelIndex));
                colorDataTable(dt, 6, 9);
                panelMapObj.child.dataTable = dt;

            }
            
            // draw child
            if (pane.hasClass('pane-child')) {

                filterColumn = FORMATTED_DATA_GRANDCHILD_COLUMN;
                groupColumn = FORMATTED_DATA_CHILD_COLUMN;
                
                // filter & aggregate child 
                let filteredData = filterDataTable(panelMapObj.child.dataTable, filterColumn, filterVals, ALL_COLUMNS);
                let groupedData = groupFilteredData(filteredData, groupColumn, sumAvg, RAWDATA_HSE_COLUMNS, AGGDATA_HSE_COLUMNS);

                // draw child
                panelMapObj.child.table = drawTableChart(filteredData, tableDiv, panelMapObj.child.table);
                panelMapObj.child.chart = drawColumnChart(groupedData, chartDiv, AGGDATA_CHART_COLUMNS);

                // register child event handlers
                addTableEventHandler(panelMapObj.child, AGGDATA_CHART_COLUMNS.length - 1);     // skip the id column
            
            // draw grandchild
            } else {

                filterColumn = FORMATTED_DATA_CHILD_COLUMN;
                groupColumn = FORMATTED_DATA_GRANDCHILD_COLUMN;

                // filter & aggregate grandchild 
                let filteredData = filterDataTable(panelMapObj.child.dataTable, filterColumn, filterVals, ALL_COLUMNS);
                let groupedData = groupFilteredData(filteredData, groupColumn, sumAvg, RAWDATA_HSE_COLUMNS, AGGDATA_HSE_COLUMNS);

                // format grandchild datatable
                let dt = groupedData.toDataTable();
                colorDataTable(dt, 5, 8);
                panelMapObj.grandchild.dataTable = dt;

                // draw grandchild
                panelMapObj.grandchild.table = drawTableChart(dt, tableDiv, panelMapObj.grandchild.table);
                panelMapObj.grandchild.chart = drawColumnChart(dt, chartDiv, AGGDATA_CHART_COLUMNS);

                // register grandchild event handlers
                addTableEventHandler(panelMapObj.grandchild, AGGDATA_CHART_COLUMNS.length - 1);     // skip the id column
                //addChartEventHandler(panelMapObj.grandchild);

            } 

        }

        function getJsonChartData(panelIndex) {

            let dataRows;

            const dataCols = [
                { id: '0', type: 'number', label: '<%= utils.capitalise(child_period) %>' },            // v: 0, f: 'Mon Feb 4th'
                { id: '1', type: 'number', label: '<%= utils.capitalise(grandchild_period) %>' },       // v: 0, f: 'Night'
                { id: '2', type: 'number', label: 'Harvest' },
                { id: '3', type: 'number', label: 'Enjoy' },
                { id: '4', type: 'number', label: 'Store in' },
                { id: '5', type: 'number', label: 'Store out' },
                { id: '6', type: 'number', label: '(Store)' },
                { id: '7', type: 'number', label: 'Grid out' },
                { id: '8', type: 'number', label: 'Grid in' },
                { id: '9', type: 'number', label: '(Grid)' }];

            switch (panelIndex) {
                case 0:
                    dataRows = [
                        { c: [{ v: 0, f: 'Mon Feb 4th' }, { v: 0, f: 'Night' }, { v: 16.825 }, { v: -18.196 }, { v: -6.566 }, { v: 16.273 }, { v: 9.707 }, { v: 8.519 }, { v: -18.152 }, { v: 9.633 }] },
                        { c: [{ v: 0, f: 'Mon Feb 4th' }, { v: 1, f: 'Morning' }, { v: 18.229 }, { v: -3.603 }, { v: -2.950 }, { v: 15.211 }, { v: 12.261 }, { v: 14.878 }, { v: -18.491 }, { v: 3.613 }] },
                        { c: [{ v: 0, f: 'Mon Feb 4th' }, { v: 2, f: 'Afternoon' }, { v: 20.447 }, { v: -3.137 }, { v: -4.857 }, { v: 16.841 }, { v: 11.984 }, { v: 11.742 }, { v: -17.249 }, { v: 5.507 }] },
                        { c: [{ v: 0, f: 'Mon Feb 4th' }, { v: 3, f: 'Evening' }, { v: 9.415 }, { v: -8.049 }, { v: -14.471 }, { v: 20.649 }, { v: 6.178 }, { v: 6.458 }, { v: -15.513 }, { v: 9.055 }] },
                        { c: [{ v: 1, f: 'Tue Feb 5th' }, { v: 0, f: 'Night' }, { v: 14.648 }, { v: -9.859 }, { v: -17.979 }, { v: 11.470 }, { v: -6.509 }, { v: 6.792 }, { v: -11.471 }, { v: 4.679 }] },
                        { c: [{ v: 1, f: 'Tue Feb 5th' }, { v: 1, f: 'Morning' }, { v: 20.593 }, { v: -4.866 }, { v: -4.875 }, { v: 3.434 }, { v: -1.441 }, { v: 2.815 }, { v: -4.383 }, { v: 1.568 }] },
                        { c: [{ v: 1, f: 'Tue Feb 5th' }, { v: 2, f: 'Afternoon' }, { v: 10.735 }, { v: -19.601 }, { v: -16.177 }, { v: 9.115 }, { v: -7.062 }, { v: 8.004 }, { v: -10.967 }, { v: 2.963 }] },
                        { c: [{ v: 1, f: 'Tue Feb 5th' }, { v: 3, f: 'Evening' }, { v: 14.871 }, { v: -13.650 }, { v: -7.390 }, { v: 13.455 }, { v: 6.065 }, { v: 18.081 }, { v: -11.698 }, { v: -6.383 }] },
                        { c: [{ v: 2, f: 'Wed Feb 6th' }, { v: 0, f: 'Night' }, { v: 10.095 }, { v: -10.221 }, { v: -9.128 }, { v: 19.591 }, { v: 10.463 }, { v: 5.588 }, { v: -3.434 }, { v: -2.154 }] },
                        { c: [{ v: 2, f: 'Wed Feb 6th' }, { v: 1, f: 'Morning' }, { v: 6.934 }, { v: -15.391 }, { v: -8.238 }, { v: 9.431 }, { v: 1.193 }, { v: 6.856 }, { v: -9.843 }, { v: 2.987 }] },
                        { c: [{ v: 2, f: 'Wed Feb 6th' }, { v: 2, f: 'Afternoon' }, { v: 6.354 }, { v: -17.232 }, { v: -3.951 }, { v: 15.713 }, { v: 11.762 }, { v: 19.696 }, { v: -17.337 }, { v: -2.359 }] },
                        { c: [{ v: 2, f: 'Wed Feb 6th' }, { v: 3, f: 'Evening' }, { v: 9.793 }, { v: -6.816 }, { v: -12.542 }, { v: 5.666 }, { v: -6.876 }, { v: 13.171 }, { v: -11.950 }, { v: -1.221 }] },
                        { c: [{ v: 3, f: 'Thu Feb 7th' }, { v: 0, f: 'Night' }, { v: 20.497 }, { v: -14.924 }, { v: -4.945 }, { v: 9.182 }, { v: 4.237 }, { v: 3.490 }, { v: -16.642 }, { v: 13.152 }] },
                        { c: [{ v: 3, f: 'Thu Feb 7th' }, { v: 1, f: 'Morning' }, { v: 14.572 }, { v: -9.392 }, { v: -19.099 }, { v: 13.920 }, { v: -5.179 }, { v: 20.537 }, { v: -16.914 }, { v: -3.623 }] },
                        { c: [{ v: 3, f: 'Thu Feb 7th' }, { v: 2, f: 'Afternoon' }, { v: 3.546 }, { v: -14.066 }, { v: -10.432 }, { v: 3.447 }, { v: -6.985 }, { v: 10.173 }, { v: -12.269 }, { v: 2.096 }] },
                        { c: [{ v: 3, f: 'Thu Feb 7th' }, { v: 3, f: 'Evening' }, { v: 9.007 }, { v: -14.670 }, { v: -9.497 }, { v: 15.301 }, { v: 5.804 }, { v: 6.515 }, { v: -8.791 }, { v: 2.276 }] },
                        { c: [{ v: 4, f: 'Fri Feb 8th' }, { v: 0, f: 'Night' }, { v: 15.891 }, { v: -18.566 }, { v: -3.019 }, { v: 4.127 }, { v: 1.108 }, { v: 6.495 }, { v: -6.130 }, { v: -0.365 }] },
                        { c: [{ v: 4, f: 'Fri Feb 8th' }, { v: 1, f: 'Morning' }, { v: 12.017 }, { v: -20.318 }, { v: -20.189 }, { v: 7.685 }, { v: -12.504 }, { v: 11.664 }, { v: -18.634 }, { v: 6.970 }] },
                        { c: [{ v: 4, f: 'Fri Feb 8th' }, { v: 2, f: 'Afternoon' }, { v: 13.551 }, { v: -16.470 }, { v: -5.462 }, { v: 17.209 }, { v: 11.747 }, { v: 6.206 }, { v: -15.027 }, { v: 8.821 }] },
                        { c: [{ v: 4, f: 'Fri Feb 8th' }, { v: 3, f: 'Evening' }, { v: 13.120 }, { v: -12.507 }, { v: -16.939 }, { v: 7.234 }, { v: -9.705 }, { v: 12.925 }, { v: -6.384 }, { v: -6.541 }] },
                        { c: [{ v: 5, f: 'Sat Feb 9th' }, { v: 0, f: 'Night' }, { v: 16.552 }, { v: -15.924 }, { v: -19.386 }, { v: 18.615 }, { v: -0.771 }, { v: 18.373 }, { v: -9.758 }, { v: -8.615 }] },
                        { c: [{ v: 5, f: 'Sat Feb 9th' }, { v: 1, f: 'Morning' }, { v: 4.763 }, { v: -3.811 }, { v: -19.493 }, { v: 8.221 }, { v: -11.272 }, { v: 3.924 }, { v: -3.381 }, { v: -0.543 }] },
                        { c: [{ v: 5, f: 'Sat Feb 9th' }, { v: 2, f: 'Afternoon' }, { v: 12.947 }, { v: -13.392 }, { v: -19.124 }, { v: 6.174 }, { v: -12.950 }, { v: 17.276 }, { v: -17.566 }, { v: 0.290 }] },
                        { c: [{ v: 5, f: 'Sat Feb 9th' }, { v: 3, f: 'Evening' }, { v: 16.586 }, { v: -3.160 }, { v: -19.840 }, { v: 12.753 }, { v: -7.087 }, { v: 10.506 }, { v: -3.780 }, { v: -6.726 }] },
                        { c: [{ v: 6, f: 'Sun Feb 10th' }, { v: 0, f: 'Night' }, { v: 10.436 }, { v: -14.932 }, { v: -12.818 }, { v: 14.797 }, { v: 1.979 }, { v: 6.025 }, { v: -13.962 }, { v: 7.937 }] },
                        { c: [{ v: 6, f: 'Sun Feb 10th' }, { v: 1, f: 'Morning' }, { v: 12.537 }, { v: -11.915 }, { v: -6.735 }, { v: 19.594 }, { v: 12.859 }, { v: 6.106 }, { v: -12.372 }, { v: 6.266 }] },
                        { c: [{ v: 6, f: 'Sun Feb 10th' }, { v: 2, f: 'Afternoon' }, { v: 18.173 }, { v: -18.794 }, { v: -11.612 }, { v: 5.048 }, { v: -6.564 }, { v: 11.320 }, { v: -16.855 }, { v: 5.535 }] },
                        { c: [{ v: 6, f: 'Sun Feb 10th' }, { v: 3, f: 'Evening' }, { v: 7.448 }, { v: -12.414 }, { v: -16.431 }, { v: 14.193 }, { v: -2.238 }, { v: 18.548 }, { v: -9.476 }, { v: -9.072 }] }
                    ];
                    break;

                default:        // if panelIndex is missing returns column headings with empty rows
                    dataRows = [];
                    break;

            }

            return { 'cols': dataCols, 'rows': dataRows }
        }

    </script>


</body>
</html>